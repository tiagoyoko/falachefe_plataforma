version: '3.8'

services:
  # API CrewAI Flask
  crewai-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: falachefe-crewai-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # OpenAI
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      
      # UAZAPI
      - UAZAPI_BASE_URL=${UAZAPI_BASE_URL:-https://falachefe.uazapi.com}
      - UAZAPI_TOKEN=${UAZAPI_TOKEN}
      - UAZAPI_ADMIN_TOKEN=${UAZAPI_ADMIN_TOKEN}
      
      # Database (se necessário no futuro)
      - DATABASE_URL=${DATABASE_URL:-}
      
      # Redis (se necessário no futuro)
      - REDIS_URL=${REDIS_URL:-}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PYTHONUNBUFFERED=1
      
      # Flask
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      
      # Workers
      - GUNICORN_WORKERS=${GUNICORN_WORKERS:-2}
      - GUNICORN_THREADS=${GUNICORN_THREADS:-4}
      - GUNICORN_TIMEOUT=${GUNICORN_TIMEOUT:-120}
    
    volumes:
      # Logs persistentes
      - ./logs:/app/logs
      # Knowledge base (se houver)
      - ./knowledge:/app/knowledge:ro
    
    networks:
      - falachefe-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Limites de recursos
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx como reverse proxy (opcional mas recomendado)
  nginx:
    image: nginx:alpine
    container_name: falachefe-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - falachefe-network
    depends_on:
      crewai-api:
        condition: service_healthy
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis para cache (opcional)
  redis:
    image: redis:7-alpine
    container_name: falachefe-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - falachefe-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # PostgreSQL para persistência (opcional)
  postgres:
    image: postgres:16-alpine
    container_name: falachefe-postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-falachefe}
      - POSTGRES_USER=${POSTGRES_USER:-crewai}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./backups:/backups
    networks:
      - falachefe-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-crewai}"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    container_name: falachefe-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - falachefe-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    container_name: falachefe-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - falachefe-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  falachefe-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

