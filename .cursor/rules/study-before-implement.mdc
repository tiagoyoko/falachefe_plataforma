---
alwaysApply: true
description: Sempre estudar o projeto antes de implementar mudan√ßas
---

# Regra: Estudar Antes de Implementar

## üéØ Princ√≠pio Fundamental

**SEMPRE** estudar o projeto e a arquitetura existente **ANTES** de propor ou implementar qualquer mudan√ßa.

## ‚úÖ Fluxo Correto

### 1. **Entender o Contexto**
Antes de qualquer implementa√ß√£o, responder:

- ‚úÖ Como o sistema funciona **atualmente** em produ√ß√£o?
- ‚úÖ Qual √© a **arquitetura real** deployada?
- ‚úÖ Quais **servi√ßos externos** est√£o sendo usados?
- ‚úÖ Onde est√£o os **servidores** (Vercel? Hetzner? Railway?)
- ‚úÖ Como os **componentes** se comunicam?

### 2. **Ler Documenta√ß√£o**

Consultar **PRIMEIRO** estes arquivos:

#### Arquitetura
- [docs/architecture/high-level-architecture.md](mdc:docs/architecture/high-level-architecture.md)
- [ARQUITETURA-DOMINIOS.md](mdc:ARQUITETURA-DOMINIOS.md)
- [docs/business/project-summary.md](mdc:docs/business/project-summary.md)

#### Deploy e Infraestrutura
- [DEPLOY-HETZNER-SUCCESS.md](mdc:DEPLOY-HETZNER-SUCCESS.md)
- [DOMINIO-TRAEFIK-SUCCESS.md](mdc:DOMINIO-TRAEFIK-SUCCESS.md)
- [INTEGRACAO-COMPLETA-WEBHOOK-CREWAI.md](mdc:INTEGRACAO-COMPLETA-WEBHOOK-CREWAI.md)

#### C√≥digo
- [src/app/api/webhook/uaz/route.ts](mdc:src/app/api/webhook/uaz/route.ts) - Webhook principal
- [src/services/message-service.ts](mdc:src/services/message-service.ts) - L√≥gica de mensagens

### 3. **Verificar Estado Atual**

```bash
# Verificar servidores ativos
curl https://falachefe.app.br/api/health
curl http://37.27.248.13:8000/health

# Verificar banco de dados via Supabase MCP
mcp_supabase_list_tables({
  project_id: "zpdartuyaergbxmbmtur",
  schemas: ["public"]
})

# Verificar deploys via Vercel MCP
mcp_Vercel_list_deployments({
  projectId: "prj_SyUWhD6Qi7lAqJ3SaMxk7JgmhcZl",
  teamId: "team_a1QqoDU5jxv6sUlIZM8b7xII"
})
```

### 4. **Planejar Antes de Agir**

Criar documento de an√°lise:
- Problema identificado
- Solu√ß√£o proposta
- Impacto em outros componentes
- Testes necess√°rios

Exemplo: [ANALISE-PROJETO-CHAT-WEB.md](mdc:ANALISE-PROJETO-CHAT-WEB.md)

### 5. **Implementar com Cuidado**

- Come√ßar pelos arquivos mais espec√≠ficos
- Testar incrementalmente
- Validar com lint: `npm run lint`
- Build antes de commit: `npm run build`

### 6. **Commit e Deploy**

```typescript
// 1. Usar GitHub MCP para push
await mcp_github_create_or_update_file({...});

// 2. Aguardar 30s

// 3. Verificar deploy com Vercel MCP
await mcp_Vercel_list_deployments({...});

// 4. Validar status
const deploy = deployments[0];
if (deploy.state === "READY") {
  console.log("‚úÖ Deploy conclu√≠do");
} else if (deploy.state === "ERROR") {
  // Ver logs
  await mcp_Vercel_get_deployment_build_logs({...});
}
```

## ‚ùå O Que N√ÉO Fazer

1. ‚ùå **N√ÉO** propor Docker local quando j√° existe servidor em produ√ß√£o
2. ‚ùå **N√ÉO** assumir arquitetura sem verificar
3. ‚ùå **N√ÉO** fazer mudan√ßas sem entender impacto
4. ‚ùå **N√ÉO** ignorar documenta√ß√£o existente
5. ‚ùå **N√ÉO** tentar m√∫ltiplas abordagens sem plano

## ‚úÖ O Que Fazer

1. ‚úÖ **LER** documenta√ß√£o existente
2. ‚úÖ **VERIFICAR** estado atual via MCPs
3. ‚úÖ **PLANEJAR** mudan√ßas em documento
4. ‚úÖ **IMPLEMENTAR** incrementalmente
5. ‚úÖ **VALIDAR** com lint e build
6. ‚úÖ **USAR** GitHub e Vercel MCPs
7. ‚úÖ **DOCUMENTAR** mudan√ßas realizadas

## Exemplo de Abordagem Correta

Ver: Session atual onde implementamos chat web
- Estudei projeto completo
- Identifiquei servidor Hetzner ativo
- Corrigi endpoint para apontar para servidor correto
- Implementei detec√ß√£o de usu√°rio sem empresa
- Usei GitHub MCP para push
- Documentei tudo

## Refer√™ncias

- [GUIA-DEPLOY-DOCKER-STACK.md](mdc:GUIA-DEPLOY-DOCKER-STACK.md)
- [TROUBLESHOOTING-SERVIDOR-HETZNER.md](mdc:TROUBLESHOOTING-SERVIDOR-HETZNER.md)
