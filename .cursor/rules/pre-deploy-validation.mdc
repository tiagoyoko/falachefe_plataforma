---
description: Checklist de valida√ß√£o obrigat√≥rio antes de deploy em produ√ß√£o
---
# Checklist Pr√©-Deploy - FalaChefe

## üö® OBRIGAT√ìRIO Antes de Deploy

### Etapa 1: Diagn√≥stico de Produ√ß√£o

```bash
./scripts/diagnose-production.sh
```

**Se score < 80%**: Investigar falhas ANTES de deploy.

### Etapa 2: Qualidade de C√≥digo

```bash
# Lint (sem erros)
npm run lint

# TypeScript (sem erros)
npm run build
```

**Ambos devem passar 100%** antes de continuar.

### Etapa 3: Teste Local

```bash
npm run dev
```

**Validar**:
- [ ] Aplica√ß√£o inicia sem erros
- [ ] Logs n√£o mostram warnings cr√≠ticos
- [ ] Funcionalidade testada manualmente

### Etapa 4: Vari√°veis de Ambiente

**Vercel (.env.local)**:
```bash
CREWAI_API_URL=https://api.falachefe.app.br  # ‚úÖ Com "api."
UAZAPI_TOKEN=***
CREWAI_SERVICE_TOKEN=***
```

**Hetzner (.env)**:
```bash
FALACHEFE_API_URL=https://falachefe.app.br  # ‚úÖ SEM "api."
OPENAI_API_KEY=***
```

### Etapa 5: Commit Message

**Formato**:
```
<type>: <descri√ß√£o curta>

PROBLEMA:
- Descri√ß√£o do problema

SOLU√á√ÉO:
- O que foi feito

IMPACTO:
- Antes: X
- Depois: Y
```

**Types**: `feat`, `fix`, `refactor`, `docs`, `chore`, `test`

### Etapa 6: Deploy

```bash
# Push (aciona deploy autom√°tico Vercel)
git push origin master

# OU usar GitHub MCP
mcp_github_create_or_update_file(...)
```

### Etapa 7: Valida√ß√£o P√≥s-Deploy

**Aguardar 2-3 minutos**, depois:

```bash
# 1. Verificar deploy Vercel
# https://vercel.com/tiagoyoko/falachefe-plataforma/deployments

# 2. Testar endpoint
curl https://falachefe.app.br/api/health

# 3. Verificar logs
vercel logs --follow

# 4. Teste real via WhatsApp
# Enviar mensagem e verificar resposta
```

## ‚ùå N√ÉO Deploy Se

- [ ] Diagn√≥stico falhou
- [ ] Lint tem erros
- [ ] Build falhou
- [ ] N√£o testou localmente
- [ ] N√£o sabe o que a mudan√ßa faz
- [ ] √â sexta √† noite üòÖ

## ‚úÖ Deploy APENAS Se

- [x] Todos os checks passaram
- [x] C√≥digo revisado
- [x] Impacto conhecido
- [x] Rollback plan existe
- [x] Hor√°rio adequado

## üîÑ Rollback Plan

Se deploy quebrar:

```bash
# 1. Via Vercel Dashboard
# Deployments ‚Üí √öltimo est√°vel ‚Üí "Promote to Production"

# 2. Via Git
git revert HEAD
git push origin master
```

## üìä M√©tricas de Sucesso

**Acompanhar**:
- Taxa de deploys bem-sucedidos: > 95%
- Tempo m√©dio de deploy: < 5 min
- Rollbacks: < 5%
- Erros em produ√ß√£o: < 1%

Veja [diagnose-production.sh](mdc:scripts/diagnose-production.sh) para mais detalhes.
