#!/usr/bin/env tsx

/**
 * Script de valida√ß√£o dos componentes da Fase 1
 * Valida a estrutura e funcionalidades sem depend√™ncias externas
 */

import { UAZClient } from '../src/lib/uaz-api/client';
import { CircuitBreaker } from '../src/lib/uaz-api/circuit-breaker';
import { RetryLogic } from '../src/lib/uaz-api/retry-logic';
import { RateLimiter } from '../src/lib/uaz-api/rate-limiter';
import { UAZLogger } from '../src/lib/logger/uaz-logger';
import { validateSendTextMessage } from '../src/lib/uaz-api/validation';

console.log('üöÄ Iniciando valida√ß√£o dos componentes da Fase 1...\n');

const results = {
  uazClient: false,
  circuitBreaker: false,
  retryLogic: false,
  rateLimiter: false,
  logger: false,
  validation: false,
  webhook: false,
  templates: false,
};

try {
  // 1. Valida√ß√£o do UAZ Client
  console.log('üì° Testando UAZ Client...');
  const client = new UAZClient({
    baseUrl: 'https://test.uazapi.com',
    apiKey: 'test-key',
    apiSecret: 'test-secret',
    webhookSecret: 'test-webhook',
  });
  
  if (client && typeof client.sendTextMessage === 'function') {
    console.log('‚úÖ UAZ Client: OK');
    results.uazClient = true;
  } else {
    throw new Error('UAZ Client n√£o inicializou corretamente');
  }

  // 2. Valida√ß√£o do Circuit Breaker
  console.log('üîå Testando Circuit Breaker...');
  const circuitBreaker = new CircuitBreaker({
    failureThreshold: 5,
    recoveryTimeout: 60000,
  });
  
  if (circuitBreaker && typeof circuitBreaker.execute === 'function') {
    console.log('‚úÖ Circuit Breaker: OK');
    results.circuitBreaker = true;
  } else {
    throw new Error('Circuit Breaker n√£o inicializou corretamente');
  }

  // 3. Valida√ß√£o do Retry Logic
  console.log('üîÑ Testando Retry Logic...');
  const retryLogic = new RetryLogic({
    maxRetries: 3,
    baseDelay: 1000,
  });
  
  if (retryLogic && typeof retryLogic.execute === 'function') {
    console.log('‚úÖ Retry Logic: OK');
    results.retryLogic = true;
  } else {
    throw new Error('Retry Logic n√£o inicializou corretamente');
  }

  // 4. Valida√ß√£o do Rate Limiter
  console.log('‚è±Ô∏è Testando Rate Limiter...');
  const rateLimiter = new RateLimiter({
    requestsPerMinute: 60,
    requestsPerHour: 1000,
  });
  
  if (rateLimiter && typeof rateLimiter.canMakeRequest === 'function') {
    console.log('‚úÖ Rate Limiter: OK');
    results.rateLimiter = true;
  } else {
    throw new Error('Rate Limiter n√£o inicializou corretamente');
  }

  // 5. Valida√ß√£o do Logger
  console.log('üìù Testando Logger...');
  const logger = new UAZLogger('test');
  
  if (logger && typeof logger.info === 'function') {
    console.log('‚úÖ Logger: OK');
    results.logger = true;
  } else {
    throw new Error('Logger n√£o inicializou corretamente');
  }

  // 6. Valida√ß√£o das Valida√ß√µes
  console.log('‚úÖ Testando Valida√ß√µes...');
  try {
    const validData = {
      number: '5511999999999',
      text: 'Teste de valida√ß√£o',
    };
    
    const validated = validateSendTextMessage(validData);
    if (validated) {
      console.log('‚úÖ Valida√ß√µes: OK');
      results.validation = true;
    }
  } catch (error) {
    throw new Error('Valida√ß√µes n√£o funcionaram corretamente');
  }

  // 7. Valida√ß√£o do Webhook (arquivo existe)
  console.log('üîó Testando Webhook...');
  try {
    const fs = require('fs');
    const webhookPath = './src/app/api/webhook/uaz/route.ts';
    if (fs.existsSync(webhookPath)) {
      console.log('‚úÖ Webhook: OK');
      results.webhook = true;
    } else {
      throw new Error('Arquivo de webhook n√£o encontrado');
    }
  } catch (error) {
    throw new Error('Webhook n√£o encontrado');
  }

  // 8. Valida√ß√£o dos Templates (arquivo existe)
  console.log('üìã Testando Templates...');
  try {
    const fs = require('fs');
    const templatePath = './src/lib/uaz-api/template-service.ts';
    if (fs.existsSync(templatePath)) {
      console.log('‚úÖ Templates: OK');
      results.templates = true;
    } else {
      throw new Error('Arquivo de templates n√£o encontrado');
    }
  } catch (error) {
    throw new Error('Templates n√£o encontrados');
  }

} catch (error) {
  console.error('‚ùå Erro durante valida√ß√£o:', error);
}

// Resultado final
console.log('\nüìä RESULTADO DA VALIDA√á√ÉO:');
console.log('========================');

const totalTests = Object.keys(results).length;
const passedTests = Object.values(results).filter(Boolean).length;

Object.entries(results).forEach(([component, passed]) => {
  const status = passed ? '‚úÖ' : '‚ùå';
  console.log(`${status} ${component}: ${passed ? 'PASSOU' : 'FALHOU'}`);
});

console.log('\nüìà ESTAT√çSTICAS:');
console.log(`Total de testes: ${totalTests}`);
console.log(`Testes passaram: ${passedTests}`);
console.log(`Taxa de sucesso: ${((passedTests / totalTests) * 100).toFixed(1)}%`);

if (passedTests === totalTests) {
  console.log('\nüéâ FASE 1 VALIDADA COM SUCESSO!');
  console.log('Todos os componentes est√£o funcionando corretamente.');
  console.log('A plataforma est√° pronta para a Fase 2!');
} else {
  console.log('\n‚ö†Ô∏è ALGUNS COMPONENTES PRECISAM DE AJUSTE');
  console.log('Verifique os componentes que falharam acima.');
}

process.exit(passedTests === totalTests ? 0 : 1);
