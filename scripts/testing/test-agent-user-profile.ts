#!/usr/bin/env tsx

/**
 * Script de teste para verificar se o agente consegue recuperar informa√ß√µes do usu√°rio
 */

import { falachefeSecretaryAgent } from '../src/agents/falachefe-secretary-agent'
import { userProfileTool } from '../src/agents/core/user-profile-tool'

async function testAgentUserProfileRecovery() {
  console.log('üß™ Testando recupera√ß√£o de informa√ß√µes do usu√°rio pelo agente...\n')

  const testUserId = 'test-user-123'
  const testConversationId = 'test-conv-456'

  try {
    // 1. Criar perfil de teste do usu√°rio
    console.log('üìù Criando perfil de teste do usu√°rio...')
    await userProfileTool.updatePersonalInfo(testUserId, {
      name: 'Jo√£o Silva',
      company: 'TechCorp Ltda',
      position: 'Gerente de Projetos',
      industry: 'Tecnologia'
    })

    await userProfileTool.updateBusinessContext(testUserId, {
      goals: ['Aumentar produtividade da equipe', 'Reduzir custos operacionais'],
      priorities: ['Automa√ß√£o de processos', 'Gest√£o financeira'],
      mainChallenges: ['Falta de visibilidade financeira', 'Processos manuais']
    })

    console.log('‚úÖ Perfil de teste criado com sucesso\n')

    // 2. Testar consulta de perfil
    console.log('üîç Testando consulta de perfil...')
    const profileResult = await userProfileTool.getUserProfile({
      userId: testUserId,
      includeSummary: true
    })

    if (profileResult.success) {
      console.log('‚úÖ Consulta de perfil funcionando:')
      console.log('üìã Resumo:', profileResult.summary)
      console.log('üë§ Nome:', profileResult.profile?.personalInfo?.name)
      console.log('üè¢ Empresa:', profileResult.profile?.personalInfo?.company)
      console.log('üéØ Metas:', profileResult.profile?.businessContext?.goals)
    } else {
      console.log('‚ùå Erro na consulta de perfil:', profileResult.error)
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // 3. Testar agente com mensagem que deveria consultar perfil
    console.log('ü§ñ Testando agente com mensagem sobre perfil...')
    
    const testMessages = [
      'Ol√°, qual √© o meu nome?',
      'Em qual empresa eu trabalho?',
      'Quais s√£o os meus objetivos?',
      'Meu nome √© Jo√£o Silva e trabalho na TechCorp',
      'Preciso de ajuda com gest√£o financeira'
    ]

    for (const message of testMessages) {
      console.log(`\nüí¨ Testando mensagem: "${message}"`)
      
      try {
        const response = await falachefeSecretaryAgent.processMessage(
          message,
          testUserId,
          testConversationId
        )

        console.log(`‚úÖ Resposta do agente:`)
        console.log(`üìù Conte√∫do: ${response.response}`)
        console.log(`üîß Tools usadas: ${response.metadata.tools_used || 0}`)
        console.log(`üß† Contexto: ${JSON.stringify(response.metadata.user_context, null, 2)}`)
        console.log(`‚è±Ô∏è Tempo: ${response.processingTime}ms`)

        // Verificar se o agente usou as tools
        if (response.metadata.tools_used > 0) {
          console.log('üéâ Sucesso! O agente usou ferramentas para consultar o perfil')
        } else {
          console.log('‚ö†Ô∏è O agente n√£o usou ferramentas de consulta de perfil')
        }

      } catch (error) {
        console.log(`‚ùå Erro ao processar mensagem: ${error}`)
      }

      console.log('-'.repeat(40))
    }

    console.log('\n' + '='.repeat(50) + '\n')

    // 4. Testar consulta direta das tools
    console.log('üîß Testando tools diretamente...')
    
    // Simular contexto de execu√ß√£o
    const mockContext = {
      userId: testUserId
    }

    try {
      // Testar getUserProfileTool
      console.log('üîç Testando getUserProfileTool...')
      const profileToolResult = await getUserProfileTool.execute({ includeSummary: true }, { context: mockContext })
      console.log('‚úÖ Resultado:', profileToolResult)

      // Testar getPersonalInfoTool
      console.log('\nüîç Testando getPersonalInfoTool...')
      const personalInfoResult = await getPersonalInfoTool.execute({}, { context: mockContext })
      console.log('‚úÖ Resultado:', personalInfoResult)

      // Testar getBusinessContextTool
      console.log('\nüîç Testando getBusinessContextTool...')
      const businessContextResult = await getBusinessContextTool.execute({}, { context: mockContext })
      console.log('‚úÖ Resultado:', businessContextResult)

    } catch (error) {
      console.log('‚ùå Erro ao testar tools:', error)
    }

    console.log('\nüéØ Teste conclu√≠do!')

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error)
  }
}

// Importar as tools para teste direto
import { getUserProfileTool, getPersonalInfoTool, getBusinessContextTool } from '../src/agents/falachefe-secretary-agent'

// Executar teste
if (require.main === module) {
  testAgentUserProfileRecovery()
    .then(() => {
      console.log('\n‚úÖ Teste finalizado')
      process.exit(0)
    })
    .catch((error) => {
      console.error('\n‚ùå Erro no teste:', error)
      process.exit(1)
    })
}
