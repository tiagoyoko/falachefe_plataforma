#!/usr/bin/env tsx

/**
 * Script de Teste do Sistema de Mem√≥ria do Agente Falachefe
 * 
 * Este script testa todas as funcionalidades do sistema de mem√≥ria:
 * - Armazenamento e recupera√ß√£o de mem√≥rias
 * - Contexto de conversa√ß√£o
 * - Perfil do usu√°rio
 * - Sistema de aprendizado
 * - Integra√ß√£o com o agente
 */

import { falachefeMemorySystem } from '../src/agents/memory/memory-system'
import { memoryManager } from '../src/agents/memory/memory-manager'
import { conversationContextManager } from '../src/agents/memory/conversation-context'
import { userProfileManager } from '../src/agents/memory/user-profile'
import { learningSystem } from '../src/agents/memory/learning-system'
import { MemoryCategory } from '../src/agents/memory/types'

async function testMemorySystem() {
  console.log('üß† Iniciando testes do Sistema de Mem√≥ria do Falachefe...\n')

  const testUserId = 'test_user_123'
  const testConversationId = 'test_conv_456'

  try {
    // Teste 1: Armazenar mem√≥ria b√°sica
    console.log('üìù Teste 1: Armazenando mem√≥ria b√°sica...')
    const memoryData = {
      userId: testUserId,
      conversationId: testConversationId,
      category: MemoryCategory.USER_PROFILE,
      key: 'user_preferences',
      value: {
        name: 'Jo√£o Silva',
        preferredLanguage: 'pt-BR',
        businessType: 'restaurante',
        location: 'S√£o Paulo'
      },
      importance: 0.8
    }

    await memoryManager.store(memoryData)
    console.log('‚úÖ Mem√≥ria armazenada com sucesso')

    // Teste 2: Recuperar mem√≥rias
    console.log('\nüîç Teste 2: Recuperando mem√≥rias...')
    const retrievedMemories = await memoryManager.retrieve({
      userId: testUserId,
      conversationId: testConversationId,
      category: MemoryCategory.USER_PROFILE
    })
    console.log('‚úÖ Mem√≥rias recuperadas:', retrievedMemories.length)
    console.log('üìä Dados recuperados:', JSON.stringify(retrievedMemories[0]?.value, null, 2))

    // Teste 3: Atualizar contexto de conversa√ß√£o
    console.log('\nüí¨ Teste 3: Atualizando contexto de conversa√ß√£o...')
    await conversationContextManager.addMessage(
      testConversationId,
      testUserId,
      'user',
      'Ol√°, preciso de ajuda com meu restaurante'
    )
    console.log('‚úÖ Contexto de conversa√ß√£o atualizado')

    // Teste 4: Criar perfil do usu√°rio
    console.log('\nüë§ Teste 4: Criando perfil do usu√°rio...')
    await userProfileManager.updateUserProfile(testUserId, {
      personalInfo: {
        name: 'Jo√£o Silva',
        email: 'joao@restaurante.com',
        businessType: 'restaurante',
        location: 'S√£o Paulo',
        experience: 'intermedi√°rio'
      },
      preferences: {
        language: 'pt-BR',
        notifications: true,
        theme: 'light'
      },
      businessContext: {
        industry: 'food_service',
        size: 'small',
        goals: ['crescimento', 'lucratividade']
      }
    })
    console.log('‚úÖ Perfil do usu√°rio criado')

    // Teste 5: Processar mensagem com mem√≥ria
    console.log('\nü§ñ Teste 5: Processando mensagem com sistema de mem√≥ria...')
    const testMessage = 'Preciso de dicas para aumentar as vendas do meu restaurante'
    
    const memoryResponse = await falachefeMemorySystem.processMessageWithMemory(
      testUserId,
      testConversationId,
      testMessage,
      'user'
    )

    console.log('‚úÖ Mensagem processada com mem√≥ria')
    console.log('üìä Contexto personalizado aplicado:')
    console.log('   - Mem√≥rias relevantes:', memoryResponse.context.relevantMemories.length)
    console.log('   - Insights gerados:', memoryResponse.context.insights.length)
    console.log('   - Recomenda√ß√µes:', memoryResponse.context.recommendations.length)
    console.log('   - Deve armazenar:', memoryResponse.shouldStore)

    // Teste 6: Sistema de aprendizado
    console.log('\nüéì Teste 6: Testando sistema de aprendizado...')
    const learningResult = await learningSystem.analyzeInteractions(
      testUserId,
      testConversationId
    )

    console.log('‚úÖ Sistema de aprendizado testado')
    console.log('üìä Insights gerados:', learningResult.length)
    console.log('üí° Primeiro insight:', learningResult[0]?.summary || 'Nenhum insight')

    // Teste 7: Limpeza de mem√≥rias expiradas
    console.log('\nüßπ Teste 7: Testando limpeza de mem√≥rias...')
    const cleanupResult = await memoryManager.cleanupExpiredMemories()
    console.log('‚úÖ Limpeza executada:', cleanupResult, 'mem√≥rias removidas')

    console.log('\nüéâ Todos os testes do sistema de mem√≥ria foram executados com sucesso!')
    console.log('\nüìã Resumo dos testes:')
    console.log('   ‚úÖ Armazenamento de mem√≥rias')
    console.log('   ‚úÖ Recupera√ß√£o de mem√≥rias')
    console.log('   ‚úÖ Contexto de conversa√ß√£o')
    console.log('   ‚úÖ Perfil do usu√°rio')
    console.log('   ‚úÖ Processamento com mem√≥ria')
    console.log('   ‚úÖ Sistema de aprendizado')
    console.log('   ‚úÖ Limpeza de mem√≥rias')

  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error)
    console.error('Stack trace:', error instanceof Error ? error.stack : 'N/A')
    process.exit(1)
  }
}

// Executar testes se o script for chamado diretamente
if (require.main === module) {
  testMemorySystem()
    .then(() => {
      console.log('\n‚úÖ Script de teste conclu√≠do')
      process.exit(0)
    })
    .catch((error) => {
      console.error('‚ùå Falha no script de teste:', error)
      process.exit(1)
    })
}

export { testMemorySystem }
